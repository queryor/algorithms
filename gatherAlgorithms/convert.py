import sys
import math
import time
import random
## 凸包问题

#获取基准点的下标,基准点是p[k]
def get_leftbottompoint(p):
    k = 0
    for i in range(1, len(p)):
        if p[i][1] < p[k][1] or (p[i][1] == p[k][1] and p[i][0] < p[k][0]):
            k = i
    return k

#叉乘计算方法
def multiply(p1, p2, p0):
    return (p1[0] - p0[0]) * (p2[1] - p0[1]) - (p2[0] - p0[0]) * (p1[1] - p0[1])

#获取极角，通过求反正切得出，考虑pi/2的情况
def get_arc(p1, p0):
    # 兼容sort_points_tan的考虑
    if (p1[0] - p0[0]) == 0:
        if ((p1[1] - p0[1])) == 0:
            return -1
        else:
            return math.pi / 2
    tan = float((p1[1] - p0[1])) / float((p1[0] - p0[0]))
    arc = math.atan(tan)
    if arc >= 0:
        return arc
    else:
        return math.pi + arc

#对极角进行排序,排序结果list不包含基准点
def sort_points_tan(p, pk):
    p2 = []
    for i in range(0, len(p)):
        p2.append({"index": i, "arc": get_arc(p[i], pk)})
    #print('排序前:',p2)
    p2.sort(key=lambda k: (k.get('arc')))
    #print('排序后:',p2)
    p_out = []
    for i in range(0, len(p2)):
        p_out.append(p[p2[i]["index"]])
    return p_out

def convex_hull(p):
    #p=list(set(p))
    #print('全部点:',p)
    k = get_leftbottompoint(p)
    pk = p[k]
    p.remove(p[k])
    #print('排序前去除基准点的所有点:',p,'基准点:',pk)

    p_sort = sort_points_tan(p, pk)   #按与基准点连线和x轴正向的夹角排序后的点坐标
    #print('其余点与基准点夹角排序:',p_sort)
    p_result = [pk,p_sort[0]]

    top = 2
    for i in range(1, len(p_sort)):
        #####################################
        #叉乘为正,向前递归删点;叉乘为负,序列追加新点
        while(multiply(p_result[-2], p_sort[i],p_result[-1]) > 0):
            p_result.pop()
        p_result.append(p_sort[i])    
    return p_result#测试


if __name__ == '__main__':
    pass
    test_data =[[-117.08287596239188, 32.742449654231756], [-117.064779294855, 32.75277839973797], [-117.06282153959579, 32.755389518749205], [-117.0796399027641, 32.74117213338519], [-117.08701064774766, 32.74704170619377], [-117.09692375560601, 32.76321003723887], [-117.08026322061076, 32.74149858542811], [-117.0632022464865, 32.77137176739243], [-117.07757028479435, 32.745761447127826], [-117.05929047019305, 32.75879170909516], [-117.09045493548933, 32.77798680039394], [-117.09184241553271, 32.77197019851262], [-117.09036268563308, 32.74952414395254], [-117.08409913864648, 32.77619022269723], [-117.0848017741041, 32.7451447302509], [-117.07338885256641, 32.77611707945556], [-117.05884261602108, 32.76642755926099], [-117.08933106314896, 32.777855904320674], [-117.05890091806745, 32.76043274663638], [-117.07745042001892, 32.74262310474654], [-117.08342063396749, 32.743047213097526], [-117.09439401899057, 32.75185316741198], [-117.083008, 32.775270317307815], [-117.06428237292167, 32.752914467459], [-117.06294405003972, 32.75519298888007], [-117.06303196246213, 32.75554858737346], [-117.07192333745073, 32.74764841340341], [-117.06283146142732, 32.76776610403701], [-117.08787046912151, 32.747265245431635], [-117.06324511067857, 32.76983997516672], [-117.09334382182465, 32.774959216053894], [-117.07935670594512, 32.741424898744], [-117.08418366746966, 32.74464591806875], [-117.06446455960575, 32.772168679998565], [-117.06427338421366, 32.772310871477146], [-117.08241326025676, 32.77786670745188], [-117.08189493318747, 32.773542574888985], [-117.06570437001585, 32.77312301738792], [-117.07131684546647, 32.74754763876315], [-117.09758935338252, 32.75415860756322], [-117.09653942027182, 32.75340089849066], [-117.09895135305263, 32.75513779537792], [-117.0976074618361, 32.763038495175806], [-117.06096553612457, 32.76749343251289], [-117.06281965622597, 32.77016548136049], [-117.09226480836654, 32.75031307634462], [-117.07977300000002, 32.7412823840255], [-117.07098973083963, 32.74995926992531], [-117.09121687756772, 32.74953685367323], [-117.06790202903295, 32.77599466004807], [-117.0950078776093, 32.76480540877763], [-117.07463465743189, 32.74856034738166], [-117.09547132254232, 32.75263361946011], [-117.0986727765216, 32.75493799862747], [-117.06112341823402, 32.75753657355], [-117.08137362553302, 32.77309035741022], [-117.09472688097534, 32.772064643723105], [-117.08194789542726, 32.74212604938377], [-117.09460065802315, 32.771856838901535], [-117.0950579764667, 32.759054049357786], [-117.07132, 32.74754427186468], [-117.05939046856992, 32.763796996073445], [-117.09379777202201, 32.77486777554106], [-117.09071322662041, 32.77311339158721], [-117.0661104782664, 32.75326515099136], [-117.07822815312593, 32.743859335376186], [-117.08586647162574, 32.74566598221152], [-117.0668206281519, 32.77440855192599], [-117.06930980311336, 32.77270741260984], [-117.0615009978413, 32.756773695820556], [-117.06443855290958, 32.75264008762734], [-117.09227964820103, 32.76746660933011], [-117.08287596239188, 32.742449654231756]]
    #print(test_data)

    result = convex_hull(test_data)
    print(result)
    t=0

import matplotlib.pyplot as plt
x1=[]
y1=[]
for i in range(len(test_data)):
    ri=test_data[i]
    #print(ri)
    x1.append(ri[0])
    y1.append(ri[1])

plt.plot(x1,y1,linestyle=' ',marker='.')


xx=[]
yy=[]
for i in range(len(result)):
    ri=result[i]
    #print(ri)
    xx.append(ri[0])
    yy.append(ri[1])

plt.plot(xx,yy,linestyle=' ',marker='*')
plt.show()
